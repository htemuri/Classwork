df$carb = factor(df$carb)
fit1 <- lm(mpg ~ am, data=df)
summary(fit1)
df$am <- relevel(df$am, ref = "1")
fit1 <- lm(mpg ~ am, data=df)
summary(fit1)
fit2 <- lm(mpg ~ hp + wt + am + gear, data=df)
Anova(fit2)
summary(fit2)
lmtest::bptest(fit2)
# 1.5 Testing assumptions for homoscedasticity and normality
shapiro.test(fit2)
# 1.5 Testing assumptions for homoscedasticity and normality
shapiro.test(fit2)
fit2 <- lm(mpg ~ hp + wt + am + gear, data=df)
Anova(fit2)
# 1.5 Testing assumptions for homoscedasticity and normality
shapiro.test(fit2)
fit2
# 1.5 Testing assumptions for homoscedasticity and normality
shapiro.test(residuals(fit2))
# 1.5 Testing assumptions for homoscedasticity and normality
shapiro.test(residuals(fit2))
lmtest::bptest(fit2)
plot(fit2)
install.packages("tidyverse")
install.packages("caret")
install.packages("leaps")
install.packages("MASS")
library(tidyverse)
library(caret)
library(leaps)
library(MASS)
models <- regsubsets(mpg~., data=df,nvmax = 5)
summary(models)
cv.errors
get_model_formula <- function(id, object, outcome){
# get models data
models <- summary(object)$which[id,-1]
# Get outcome variable
form <- as.formula(object$call[[2]])
outcome <- all.vars(form)[1]
# Get model predictors
predictors <- names(which(models == TRUE))
predictors <- paste(predictors, collapse = "+")
# Build model formula
as.formula(paste0(outcome, "~", predictors))
}
get_cv_error <- function(model.formula, data){
set.seed(1)
train.control <- trainControl(method = "cv", number = 5)
cv <- train(model.formula, data = data, method = "lm",
trControl = train.control)
cv$results$RMSE
}
model.ids <- 1:5
cv.errors <- map(model.ids, get_model_formula, models, "mpg") %>%
map(get_cv_error, data = swiss) %>%
unlist()
cv.errors
get_model_formula <- function(id, object, outcome){
# get models data
models <- summary(object)$which[id,-1]
# Get outcome variable
form <- as.formula(object$call[[2]])
outcome <- all.vars(form)[1]
# Get model predictors
predictors <- names(which(models == TRUE))
predictors <- paste(predictors, collapse = "+")
# Build model formula
as.formula(paste0(outcome, "~", predictors))
}
get_cv_error <- function(model.formula, data){
set.seed(1)
train.control <- trainControl(method = "cv", number = 5)
cv <- train(model.formula, data = data, method = "lm",
trControl = train.control)
cv$results$RMSE
}
model.ids <- 1:5
cv.errors <- map(model.ids, get_model_formula, models, "mpg") %>%
map(get_cv_error, data = df) %>%
unlist()
cv.errors
cv.errors <- map(model.ids, get_model_formula, models, "mpg") %>%
map(get_cv_error, data = "df") %>%
unlist()
cv.errors <- map(model.ids, get_model_formula, models, "mpg") %>%
map(get_cv_error, data = "df") %>%
unlist()
cv.errors
library(dpylr)
install.packages("dplyr")
library(dpylr)
library(dplyr)
get_model_formula <- function(id, object, outcome){
# get models data
models <- summary(object)$which[id,-1]
# Get outcome variable
form <- as.formula(object$call[[2]])
outcome <- all.vars(form)[1]
# Get model predictors
predictors <- names(which(models == TRUE))
predictors <- paste(predictors, collapse = "+")
# Build model formula
as.formula(paste0(outcome, "~", predictors))
}
get_cv_error <- function(model.formula, data){
set.seed(1)
train.control <- trainControl(method = "cv", number = 5)
cv <- train(model.formula, data = data, method = "lm",
trControl = train.control)
cv$results$RMSE
}
model.ids <- 1:5
cv.errors <- map(model.ids, get_model_formula, models, "mpg") %>%
map(get_cv_error, data = df) %>%
unlist()
cv.errors
get_model_formula <- function(id, object, outcome){
# get models data
models <- summary(object)$which[id,-1]
# Get outcome variable
form <- as.formula(object$call[[2]])
outcome <- all.vars(form)[1]
# Get model predictors
predictors <- names(which(models == TRUE))
predictors <- paste(predictors, collapse = "+")
# Build model formula
as.formula(paste0(outcome, "~", predictors))
}
get_cv_error <- function(model.formula, data){
set.seed(1)
train.control <- trainControl(method = "cv", number = 5)
cv <- train(model.formula, data = data, method = "lm",
trControl = train.control)
cv$results$RMSE
}
model.ids <- 1:5
cv.errors <- map(model.ids, get_model_formula, models, "mpg") %>%
{ map(get_cv_error, data = df) } %>%
unlist()
cv.errors
get_model_formula <- function(id, object, outcome){
# get models data
models <- summary(object)$which[id,-1]
# Get outcome variable
#form <- as.formula(object$call[[2]])
#outcome <- all.vars(form)[1]
# Get model predictors
predictors <- names(which(models == TRUE))
predictors <- paste(predictors, collapse = "+")
# Build model formula
as.formula(paste0(outcome, "~", predictors))
}
get_cv_error <- function(model.formula, data){
set.seed(1)
train.control <- trainControl(method = "cv", number = 5)
cv <- train(model.formula, data = data, method = "lm",
trControl = train.control)
cv$results$RMSE
}
model.ids <- 1:5
cv.errors <- map(model.ids, get_model_formula, models, "mpg") %>%
{ map(get_cv_error, data = df) } %>%
unlist()
cv.errors
model.ids
train.control <- trainControl(method = "cv", number = 5)
library(tidyverse)
library(caret)
train.control <- trainControl(method = "cv", number = 5)
get_model_formula <- function(id, object, outcome){
# get models data
models <- summary(object)$which[id,-1]
# Get outcome variable
#form <- as.formula(object$call[[2]])
#outcome <- all.vars(form)[1]
# Get model predictors
predictors <- names(which(models == TRUE))
predictors <- paste(predictors, collapse = "+")
# Build model formula
as.formula(paste0(outcome, "~", predictors))
}
get_cv_error <- function(model.formula, data){
set.seed(1)
train.control <- trainControl(method = "cv", number = 5)
cv <- train(model.formula, data = data, method = "lm",
trControl = train.control)
cv$results$RMSE
}
model.ids <- 1:5
cv.errors <- map(model.ids, get_model_formula, models, "mpg") %>%
{ map(get_cv_error, data = df) } %>%
unlist()
cv.errors
get_model_formula <- function(id, object, outcome){
# get models data
models <- summary(object)$which[id,-1]
# Get outcome variable
form <- as.formula(object$call[[2]])
outcome <- all.vars(form)[1]
# Get model predictors
predictors <- names(which(models == TRUE))
predictors <- paste(predictors, collapse = "+")
# Build model formula
as.formula(paste0(outcome, "~", predictors))
}
get_cv_error <- function(model.formula, data){
set.seed(1)
train.control <- trainControl(method = "cv", number = 5)
cv <- train(model.formula, data = data, method = "lm",
trControl = train.control)
cv$results$RMSE
}
model.ids <- 1:5
cv.errors <- map(model.ids, get_model_formula, models, "mpg") %>%
{ map(get_cv_error, data = df) } %>%
unlist()
cv.errors
get_model_formula <- function(id, object, outcome){
# get models data
models <- summary(object)$which[id,-1]
# Get outcome variable
form <- as.formula(object$call[[2]])
outcome <- all.vars(form)[1]
# Get model predictors
predictors <- names(which(models == TRUE))
predictors <- paste(predictors, collapse = "+")
# Build model formula
as.formula(paste0(outcome, "~", predictors))
}
get_cv_error <- function(model.formula, data){
set.seed(1)
train.control <- trainControl(method = "cv", number = 5)
cv <- train(model.formula, data = data, method = "lm",
trControl = train.control)
cv$results$RMSE
}
model.ids <- 1:5
cv.errors <- map(model.ids, get_model_formula, models, "mpg") %>%
map(get_cv_error, data = df) %>%
unlist()
cv.errors
get_model_formula <- function(id, object, outcome){
object <- as.data.frame(t(x))
# get models data
models <- summary(object)$which[id,-1]
# Get outcome variable
form <- as.formula(object$call[[2]])
outcome <- all.vars(form)[1]
# Get model predictors
predictors <- names(which(models == TRUE))
predictors <- paste(predictors, collapse = "+")
# Build model formula
as.formula(paste0(outcome, "~", predictors))
}
get_cv_error <- function(model.formula, data){
set.seed(1)
train.control <- trainControl(method = "cv", number = 5)
cv <- train(model.formula, data = data, method = "lm",
trControl = train.control)
cv$results$RMSE
}
model.ids <- 1:5
cv.errors <- map(model.ids, get_model_formula, models, "mpg") %>%
map(get_cv_error, data = df) %>%
unlist()
cv.errors
get_model_formula <- function(id, object, outcome){
object <- as.data.frame(t(object))
# get models data
models <- summary(object)$which[id,-1]
# Get outcome variable
form <- as.formula(object$call[[2]])
outcome <- all.vars(form)[1]
# Get model predictors
predictors <- names(which(models == TRUE))
predictors <- paste(predictors, collapse = "+")
# Build model formula
as.formula(paste0(outcome, "~", predictors))
}
get_cv_error <- function(model.formula, data){
set.seed(1)
train.control <- trainControl(method = "cv", number = 5)
cv <- train(model.formula, data = data, method = "lm",
trControl = train.control)
cv$results$RMSE
}
model.ids <- 1:5
cv.errors <- map(model.ids, get_model_formula, models, "mpg") %>%
map(get_cv_error, data = df) %>%
unlist()
cv.errors
get_model_formula <- function(id, object, outcome){
# get models data
models <- summary(object)[which[id,-1]]
# Get outcome variable
form <- as.formula(object$call[[2]])
outcome <- all.vars(form)[1]
# Get model predictors
predictors <- names(which(models == TRUE))
predictors <- paste(predictors, collapse = "+")
# Build model formula
as.formula(paste0(outcome, "~", predictors))
}
get_cv_error <- function(model.formula, data){
set.seed(1)
train.control <- trainControl(method = "cv", number = 5)
cv <- train(model.formula, data = data, method = "lm",
trControl = train.control)
cv$results$RMSE
}
model.ids <- 1:5
cv.errors <- map(model.ids, get_model_formula, models, "mpg") %>%
map(get_cv_error, data = df) %>%
unlist()
cv.errors
View(models)
models[[np]]
models$np
get_model_formula <- function(id, object, outcome){
# get models data
models <- summary(object)[[which[id,-1]]]
# Get outcome variable
form <- as.formula(object$call[[2]])
outcome <- all.vars(form)[1]
# Get model predictors
predictors <- names(which(models == TRUE))
predictors <- paste(predictors, collapse = "+")
# Build model formula
as.formula(paste0(outcome, "~", predictors))
}
get_cv_error <- function(model.formula, data){
set.seed(1)
train.control <- trainControl(method = "cv", number = 5)
cv <- train(model.formula, data = data, method = "lm",
trControl = train.control)
cv$results$RMSE
}
model.ids <- 1:5
cv.errors <- map(model.ids, get_model_formula, models, "mpg") %>%
map(get_cv_error, data = df) %>%
unlist()
cv.errors
summary(models)
get_model_formula <- function(id, object, outcome){
# get models data
models <- summary(object$which[id,-1])
# Get outcome variable
form <- as.formula(object$call[[2]])
outcome <- all.vars(form)[1]
# Get model predictors
predictors <- names(which(models == TRUE))
predictors <- paste(predictors, collapse = "+")
# Build model formula
as.formula(paste0(outcome, "~", predictors))
}
get_cv_error <- function(model.formula, data){
set.seed(1)
train.control <- trainControl(method = "cv", number = 5)
cv <- train(model.formula, data = data, method = "lm",
trControl = train.control)
cv$results$RMSE
}
model.ids <- 1:5
cv.errors <- map(model.ids, get_model_formula, models, "mpg") %>%
map(get_cv_error, data = df) %>%
unlist()
cv.errors
get_model_formula <- function(id, object, outcome){
# get models data
models <- summary(object$which[id,-1])
# Get outcome variable
form <- as.formula(object$call[[2]])
outcome <- all.vars(form)[1]
# Get model predictors
predictors <- names(which(models == TRUE))
predictors <- paste(predictors, collapse = "+")
# Build model formula
as.formula(paste0("outcome", "~", predictors))
}
get_cv_error <- function(model.formula, data){
set.seed(1)
train.control <- trainControl(method = "cv", number = 5)
cv <- train(model.formula, data = data, method = "lm",
trControl = train.control)
cv$results$RMSE
}
model.ids <- 1:5
cv.errors <- map(model.ids, get_model_formula, models, "mpg") %>%
map(get_cv_error, data = df) %>%
unlist()
cv.errors
get_model_formula <- function(id, object, outcome){
# get models data
models <- summary(object$which[id,-1])
# Get outcome variable
form <- as.formula(object$call[[2]])
outcome <- all.vars(form)[1]
# Get model predictors
predictors <- names(which(models == TRUE))
predictors <- paste(predictors, collapse = "+")
# Build model formula
as.formula(paste(outcome, "~", predictors))
}
get_cv_error <- function(model.formula, data){
set.seed(1)
train.control <- trainControl(method = "cv", number = 5)
cv <- train(model.formula, data = data, method = "lm",
trControl = train.control)
cv$results$RMSE
}
model.ids <- 1:5
cv.errors <- map(model.ids, get_model_formula, models, "mpg") %>%
map(get_cv_error, data = df) %>%
unlist()
cv.errors
View(models)
get_model_formula <- function(id, object, outcome){
# get models data
models <- summary(object$which[id,-1])
# Get outcome variable
form <- as.formula(object$call[[2]])
outcome <- all.vars(form)[1]
# Get model predictors
predictors <- names(which(models == TRUE))
predictors <- paste(predictors, collapse = "+")
# Build model formula
as.formula(paste(outcome, "~", predictors))
}
get_cv_error <- function(model.formula, data){
set.seed(1)
train.control <- trainControl(method = "cv", number = 5)
cv <- train(model.formula, data = data, method = "lm",
trControl = train.control)
cv$results$RMSE
}
model.ids <- 1:5
cv.errors <- map(model.ids, get_model_formula, models, mpg) %>%
map(get_cv_error, data = df) %>%
unlist()
cv.errors
res.lm <- lm(mpg ~., data= df)
step <- stepAIC(res.lm
res.lm <- lm(mpg ~., data= df)
step <- stepAIC(res.lm, direction = "both", trace = FALSE)
library(MASS)
# Loading required packages
library(tidyverse)
library(caret)
library(leaps)
library(MASS)
get_model_formula <- function(id, object, outcome){
# get models data
models <- summary(object$which[id,-1])
# Get outcome variable
form <- as.formula(object$call[[2]])
outcome <- all.vars(form)[1]
# Get model predictors
predictors <- names(which(models == TRUE))
predictors <- paste(predictors, collapse = "+")
# Build model formula
as.formula(paste(outcome, "~", predictors))
}
get_cv_error <- function(model.formula, data){
set.seed(1)
train.control <- trainControl(method = "cv", number = 5)
cv <- train(model.formula, data = data, method = "lm",
trControl = train.control)
cv$results$RMSE
}
model.ids <- 1:5
cv.errors <- map(model.ids, get_model_formula, models, "mpg") %>%
map(get_cv_error, data = df) %>%
unlist()
cv.errors
res.lm <- lm(mpg ~., data= df)
step <- stepAIC(res.lm, direction = "both", trace = FALSE)
step
get_model_formula <- function(id, object, outcome){
# get models data
models <- summary(object$which[id,-1])
# Get outcome variable
form <- as.formula(object$call[[2]])
outcome <- all.vars(form)[1]
# Get model predictors
predictors <- names(which(models == TRUE))
predictors <- paste(predictors, collapse = "+")
# Build model formula
as.formula(paste(outcome, "~", predictors))
}
get_cv_error <- function(model.formula){
set.seed(1)
train.control <- trainControl(method = "cv", number = 5)
cv <- train(model.formula, data = df, method = "lm",
trControl = train.control)
cv$results$RMSE
}
model.ids <- 1:5
cv.errors <- map(model.ids, get_model_formula, models, "mpg") %>%
map(get_cv_error, data = df) %>%
unlist()
cv.errors
model_formula <- c()
for (model.id in 1:5) {
model_formula <- c(model_formula,get_model_formula(model.id,models,'mpg'))
}
library(tidyverse)
library(caret)
library(leaps)
library(MASS)
