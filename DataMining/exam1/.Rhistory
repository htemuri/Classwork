install.packages("datarium")
library(datarium)
df <- PlantGrowth
View(df)
# 1.1 Creating a box plot of the data
ggplot(df, aes(x=group, y=weight)) + geom_boxplot()
library(ggplot2)
library(dplyr)
library(datarium)
# 1.1 Creating a box plot of the data
ggplot(df, aes(x=group, y=weight)) + geom_boxplot()
# 1.2 Testing Normality and equal variance assumptions
# Normality Test
# for ctrl
shapiro.test(df$weight[df$group=="ctrl"])
shapiro.test(df$weight[df$group=="ctrl"])
# for trt1
shapiro.test(df$weight[df$group=="trt1"])
# for trt2
shapiro.test(df$weight[df$group=="trt2"])
# Equal variance assumptions test
var.test(weight ~ group, data=df)
# Equal variance assumptions test
bartlett.test(weight ~ group, data=df)
# 1.3 2 sample t-test to test for equal means
summary(aov(weight ~ group, data=df))
# 1.3 2 sample t-test to test for equal means
summary(lm(weight ~ group, data=df))
var.test(df$weight[df$group=="trt1"],df$weight[df$group=="trt2"])
library(readr)
diamond <- read_csv("diamond.csv")
View(diamond)
df <- diamond
# Creating df of text data
df <- iris
View(df)
# 1.1 Creating a box plot of the data
ggplot(df, aes(x=Species, y=Sepal.Width)) + geom_boxplot()
shapiro.test(df$Sepal.Width[df$Species=="setosa"])
# for versicolor
shapiro.test(df$Sepal.Width[df$Species=="versicolor"])
# for virginica
shapiro.test(df$Sepal.Width[df$Species=="virginica"])
# Equal variance assumptions test
bartlett.test(Sepal.Width ~ Species, data=df)
# 1.3 2 sample t-test to test for equal means
summary(aov(Sepal.Width ~ Species, data=df))
# 1.3 Tukey Test
TukeyHSD(aov(Sepal.Width ~ Species, data = df))
virgDf <- df$Sepal.Width[df$Species=="virginica"]
virgDf <- df$Sepal.Width[df$Species=="versicolor"]
virgDf <- df$Sepal.Width[df$Species=="virginica"]
versDf <- df$Sepal.Width[df$Species=="versicolor"]
var.test(virgDf, versDf)
t.test(virgDf,versDf,var.equal = T)
t.test(virgDf,versDf)
# Creating df of text data
diaDf <- diamond
View(diaDf)
# 2.1 Fit least squares regression
fit <- lm(price ~ carat, data = diaDf)
summary(fit)
cor.test(fit)
cor.test(x=carat,y=price)
cor.test(x=diaDf$carat,y=diaDf$price)
# Normality Test
shapiro.test(fit$residuals)
# Homoscedasticity Test
plot(fit)
lmtest::bptest(fit)
summary(fit)
# Pearson Correlation Test
cor.test(x=diaDf$carat,y=diaDf$price)
plot(fit)
ggplot(data = diaDf, aes(x = carat, y = price)) + abline(method = "lm")
ggplot(data = diaDf, aes(x = carat, y = price)) + geom_abline()
ggplot(data = diaDf, aes(x = carat, y = price)) + geom_dotplot() + geom_abline()
fit2 <- lm(price ~ color, data = diaDf)
summary(fit2)
# Normality Test
shapiro.test(diaDf$price[diaDf$color=="D"])
shapiro.test(diaDf$price[diaDf$color=="D"])
shapiro.test(diaDf$price[diaDf$color=="E"])
shapiro.test(diaDf$price[diaDf$color=="F"])
shapiro.test(diaDf$price[diaDf$color=="G"])
shapiro.test(diaDf$price[diaDf$color=="H"])
shapiro.test(diaDf$price[diaDf$color=="I"])
shapiro.test(diaDf$price[diaDf$color=="J"])
# variance test
bartlett.test(price ~ color, data=diaDf)
summary(fit2)
shapiro.test(diaDf$price[diaDf$color=="D"])
shapiro.test(diaDf$price[diaDf$color=="E"])
shapiro.test(diaDf$price[diaDf$color=="F"])
shapiro.test(diaDf$price[diaDf$color=="G"])
shapiro.test(diaDf$price[diaDf$color=="H"])
shapiro.test(diaDf$price[diaDf$color=="I"])
shapiro.test(diaDf$price[diaDf$color=="J"])
# variance test
bartlett.test(price ~ color, data=diaDf)
library(tidyverse)
library(leaps)
library(caret)
library(MASS)
summary(models)
# 2.3 Test for best regressors
models <- regsubset(price~., data = diaDf, nvmax = 9)
library(tidyverse)
library(caret)
library(leaps)
library(MASS)
models <- regsubset(price~., data = diaDf, nvmax = 9)
summary(models)
install.packages("leaps")
install.packages("leaps")
install.packages("leaps")
libary(leaps)
library(leaps)
models <- regsubset(price~., data = diaDf, nvmax = 9)
summary(models)
models <- regsubsets(price~., data = diaDf, nvmax = 9)
summary(models)
# 2.3 Test for best regressors
models <- regsubsets(price~., data = diaDf, nvmax = 10)
summary(models)
# 2.3 Test for best regressors
models <- regsubsets(price~., data = diaDf, nvmax = 8)
summary(models)
# 2.5 Step AIC
res.lm <- lm(price~., data = diaDf)
step <- stepAIC(res.lm,direction = "both", trace = FALSE)
library(MASS)
step <- stepAIC(res.lm,direction = "both", trace = FALSE)
step
get_model_formula <- function(id, object, outcome){
# get models data
models <- summary(object$which[id,-1])
# Get outcome variable
form <- as.formula(object$call[[2]])
outcome <- all.vars(form)[1]
# Get model predictors
predictors <- names(which(models == TRUE))
predictors <- paste(predictors, collapse = "+")
# Build model formula
as.formula(paste0(outcome, "~", predictors))
}
get_cv_error <- function(model.formula, data){
set.seed(1)
train.control <- trainControl(method = "cv", number = 5)
cv <- train(model.formula, data = data, method = "lm",
trControl = train.control)
cv$results$RMSE
}
model.ids <- 1:9
cv.errors <- map(model.ids, get_model_formula, models, "price") %>%
map(get_cv_error, data = diaDf) %>%
unlist()
cv.errors
library(caret)
library(caret)
get_model_formula <- function(id, object, outcome){
# get models data
models <- summary(object$which[id,-1])
# Get outcome variable
form <- as.formula(object$call[[2]])
outcome <- all.vars(form)[1]
# Get model predictors
predictors <- names(which(models == TRUE))
predictors <- paste(predictors, collapse = "+")
# Build model formula
as.formula(paste0(outcome, "~", predictors))
}
get_cv_error <- function(model.formula, data){
set.seed(1)
train.control <- trainControl(method = "cv", number = 5)
cv <- train(model.formula, data = data, method = "lm",
trControl = train.control)
cv$results$RMSE
}
model.ids <- 1:9
cv.errors <- map(model.ids, get_model_formula, models, "price") %>%
map(get_cv_error, data = diaDf) %>%
unlist()
cv.errors
library(dplyr)
get_model_formula <- function(id, object, outcome){
# get models data
models <- summary(object$which[id,-1])
# Get outcome variable
form <- as.formula(object$call[[2]])
outcome <- all.vars(form)[1]
# Get model predictors
predictors <- names(which(models == TRUE))
predictors <- paste(predictors, collapse = "+")
# Build model formula
as.formula(paste0(outcome, "~", predictors))
}
get_cv_error <- function(model.formula, data){
set.seed(1)
train.control <- trainControl(method = "cv", number = 5)
cv <- train(model.formula, data = data, method = "lm",
trControl = train.control)
cv$results$RMSE
}
model.ids <- 1:9
cv.errors <- map(model.ids, get_model_formula, models, "price") %>%
map(get_cv_error, data = diaDf) %>%
unlist()
cv.errors
library(tidyverse)
get_model_formula <- function(id, object, outcome){
# get models data
models <- summary(object$which[id,-1])
# Get outcome variable
form <- as.formula(object$call[[2]])
outcome <- all.vars(form)[1]
# Get model predictors
predictors <- names(which(models == TRUE))
predictors <- paste(predictors, collapse = "+")
# Build model formula
as.formula(paste0(outcome, "~", predictors))
}
get_cv_error <- function(model.formula, data){
set.seed(1)
train.control <- trainControl(method = "cv", number = 5)
cv <- train(model.formula, data = data, method = "lm",
trControl = train.control)
cv$results$RMSE
}
model.ids <- 1:9
cv.errors <- map(model.ids, get_model_formula, models, "price") %>%
map(get_cv_error, data = diaDf) %>%
unlist()
cv.errors
# Build model formula
as.formula(paste(outcome, "~", predictors))
get_model_formula <- function(id, object, outcome){
# get models data
models <- summary(object$which[id,-1])
# Get outcome variable
form <- as.formula(object$call[[2]])
outcome <- all.vars(form)[1]
# Get model predictors
predictors <- names(which(models == TRUE))
predictors <- paste(predictors, collapse = "+")
# Build model formula
as.formula(paste0(outcome, "~", predictors))
}
get_cv_error <- function(model.formula, data){
set.seed(1)
train.control <- trainControl(method = "cv", number = 5)
cv <- train(model.formula, data = data, method = "lm",
trControl = train.control)
cv$results$RMSE
}
model.ids <- 1:9
cv.errors <- map(model.ids, get_model_formula, models, "price") %>%
map(get_cv_error, data = diaDf) %>%
unlist()
cv.errors
get_model_formula <- function(id, object, outcome){
# get models data
models <- summary(object$which[id,-1])
# Get outcome variable
form <- as.formula(object$call[[2]])
outcome <- all.vars(form)[1]
# Get model predictors
predictors <- names(which(models == TRUE))
predictors <- paste(predictors, collapse = "+")
# Build model formula
as.formula(paste(outcome, "~", predictors))
}
get_cv_error <- function(model.formula, data){
set.seed(1)
train.control <- trainControl(method = "cv", number = 5)
cv <- train(model.formula, data = data, method = "lm",
trControl = train.control)
cv$results$RMSE
}
model.ids <- 1:9
cv.errors <- map(model.ids, get_model_formula, models, "price") %>%
map(get_cv_error, data = diaDf) %>%
unlist()
cv.errors
